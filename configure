#!/bin/sh

LF='
';

ShowVersion(){
	info "DESLinux Application configurator"
	info "	(C)2024-2025 Dark Embedded Systems"
	info "	http://e.xprj.net/"
	info "Version: DLACF:X:A:A:20241215001"
	exit 1;
}

Main(){
	local SELFR="${BASH_SOURCE:-${DESLB_SELF_PATH:-${0}}}";
	SELF=`readlink -f "${SELFR}" || echo "${SELFR}"`;
	local sRoot="${SELF%/*}";
	local sName="${SELF##*/}";

	InitializeConfig || return 1;
	ReadConfigH "${sRoot}/config.h.in" || return 1;

	ProcessArgs "${@}" || return 1;

	SetSystemDefaultValue

	info "Configurating ${NAME} v${VER}..."

	[ -e "configure" ] && {
		error "Building in source directory is not supported."
		error "Please make separated directory and try again in it."
		warning "e.g.) mkdir build; cd build; ../configure"
		return 1;
	}

	case "${DCFG_SSMODE_STATIC}:${DCFG_SSMODE_SHARED}" in
		0:0 )
			error 'Both static and shared are disabled. Nothing to build.'
			return 1;
		;;
		0:1) export DCFG_SYS_SSMODE='shared';;
		1:0) export DCFG_SYS_SSMODE='static';;
		1:1) export DCFG_SYS_SSMODE='static shared';;
	esac

	export DCFG_SYS_SSMODE_STATIC="${DCFG_SSMODE_STATIC}";
	export DCFG_SYS_SSMODE_SHARED="${DCFG_SSMODE_SHARED}";

	TestCC CC "${CC}" "${DCFG_SYS_HOST}" || return 1;
	TestCC CC_FOR_BUILD "${CC_FOR_BUILD}" "${DCFG_SYS_BUILD}" || return 1;

	TestProg CXX "${CXX}" "${DCFG_SYS_HOST}" c++ cxx g++ gxx
	TestProg AR "${AR}" "${DCFG_SYS_HOST}" ar
	TestProg AS "${AS}" "${DCFG_SYS_HOST}" as
	TestProg LD "${LD}" "${DCFG_SYS_HOST}" ld
	TestProg RANLIB "${RANLIB}" "${DCFG_SYS_HOST}" ranlib

	TestProg CXX_FOR_BUILD "${CXX_FOR_BUILD}" "${DCFG_SYS_HOST}" c++ cxx g++ gxx
	TestProg AR_FOR_BUILD "${AR_FOR_BUILD}" "${DCFG_SYS_BUILD}" ar
	TestProg AS_FOR_BUILD "${AS_FOR_BUILD}" "${DCFG_SYS_BUILD}" as
	TestProg LD_FOR_BUILD "${LD_FOR_BUILD}" "${DCFG_SYS_BUILD}" ld
	TestProg RANLIB_FOR_BUILD "${RANLIB_FOR_BUILD}" "${DCFG_SYS_BUILD}" ranlib

	info "Generating config.h..."
	[ ! "${NO_CONFIG_H}" = '1' ] && {
		GenerateConfigH "${sRoot}/config.h.in" > 'config.h' || return 1;
	}

	info "Generating Makefile..."
	GenerateMakefile "${sRoot}/Makefile.in" > 'Makefile' || return 1;

	info "Successfully configured! Run 'make' to build."

	return 0;
}

InitializeConfig(){
	DCFG_ARGLIST='';
	DCFG_VARLIST='';

	DCFG_SSMODE_SHARED=1;
	DCFG_SSMODE_STATIC=1;

	. "${sRoot}/Project.settings" || return 1;

	return 0;
}

GenerateConfigH(){
	local x;

	[ ! -e "${1}" ] && {
		error "'${1}' is not found."
		return 1;
	}

cat <<EOF
// config.h: generated by DESLinux app configure script
#if !defined(DES_PROG_CONFIG_H)

#define DCFG_PROG_NAME "${NAME}"
#define DCFG_PROG_VERSION "${VER}"
#define DCFG_PROG_TYPE "${TYPE}"
EOF

	local IFS='
';

	for x in `export | grep DCFG_SYS_`; do
		x="${x#* }";
		x="${x%%=*}";
		eval V="\${${x}}";
		echo "#define ${x} \"${V}\""
	done

	echo

	for x in ${DCFG_VARLIST}; do
		V="${x#*=}";
		x="${x%%=*}";
		echo "#define DCFG_VAR_${x} ${V}"
	done


	local IFS='	';
	local V;
	while read -r x; do
		set -- ${x};

		case "${1}" in
			'#ConfigInt' )
				eval V="\${DCFG_KV_${2}}"
				echo "#define ${2} ${V}"
			;;
			'#ConfigStr' )
				eval V="\${DCFG_KV_${2}}"
				echo "#define ${2} \"${V}\""
			;;
			'#ConfigRaw' )
				eval V="\${DCFG_KV_${2}}"
				echo "#define ${2} ${V}"
			;;
			'#ConfigBool' )
				eval V="\${DCFG_KV_${2}}"
				echo "#define ${2} ${V}"
			;;
			*) echo "${x}";;
		esac

	done < "${1}"

cat <<EOF

#endif //!defined(DES_PROG_CONFIG_H)
EOF
	return 0;
}

GenerateMakefile(){

	[ ! -e "${1}" ] && {
		error "'${1}' is not found."
		return 1;
	}

cat <<EOF
# Makefile: generated by DESLinux app configure script

SROOT = ${sRoot}
CROOT = ${PWD:-.}

include \$(SROOT)/Project.settings
include \$(SROOT)/Project.mk

CC = ${CC}
CFLAGS_CFG = ${CFLAGS}
CPPFLAGS_CFG = ${CPPFLAGS}
CXX = ${CXX}
CXXFLAGS_CFG = ${CXXFLAGS}
LDFLAGS_CFG = ${LDFLAGS}
LIBS_CFG = ${LIBS}

CC_FOR_BUILD = ${CC_FOR_BUILD}
CFLAGS_FOR_BUILD_CFG = ${CFLAGS_FOR_BUILD:-${CFLAGS}}
CPPFLAGS_FOR_BUILD_CFG = ${CPPFLAGS_FOR_BUILD:-${CPPFLAGS}}
CXX_FOR_BUILD = ${CXX_FOR_BUILD}
CXXFLAGS_FOR_BUILD_CFG = ${CXXFLAGS_FOR_BUILD:-${CXXFLAGS}}
LDFLAGS_FOR_BUILD_CFG = ${LDFLAGS_FOR_BUILD:-${LDFLAGS}}
LIBS_FOR_BUILD_CFG = ${LIBS_FOR_BUILD:-${LIBS}}

AR = ${AR}
AS = ${AS}
LD = ${LD}
RANLIB = ${RANLIB}

AR_FOR_BUILD  = ${AR_FOR_BUILD}
AS_FOR_BUILD  = ${AS_FOR_BUILD}
LD_FOR_BUILD  = ${LD_FOR_BUILD}
RANLIB_FOR_BUILD  = ${RANLIB_FOR_BUILD}

DESTDIR =
EOF

	local IFS='
';

	for x in `export | grep DCFG_SYS_`; do
		x="${x#* }";
		x="${x%%=*}";
		eval V="\${${x}}";
		echo "${x#DCFG_SYS_} = ${V}"
	done

	echo

	for x in ${DCFG_VARLIST}; do
		V="${x#*=}";
		x="${x%%=*}";
		echo "${x} = ${V}"
	done



cat <<EOF

include \$(SROOT)/Makefile.in
EOF

	return 0;
}

TestCC(){ # WriteVar, UserDefined, Triplet
	local W="${1}";
	local U="${2}";
	local T="${3}";
	local C='';

	[ ! "${U}" = '' ] && {
		info "Checking C compiler: ${U}"
		RunTest "${U}" || {
			error " '${U}' is not found or not supported."
			return 1;
		}
		return 0;
	}

	local x;
	for x in cc gcc clang cl; do
		C="${T:+${T}-}${x}";
		info "Checking C compiler: ${C}"
		RunTest "${C}" && {
			export ${W}="${C}";
			return 0;
		}
	done

	error " No suitable C compiler ${T:+for '${T}' }is not found."
	return 1;
}

TestProg(){ # WriteVar, UserDefined, Triplet, progs...
	local W="${1}";
	local U="${2}";
	local T="${3}";
	local P="${4}";
	local C='';

	[ ! "${U}" = '' ] && {
		info "Checking ${U}"
		RunTest "${U}" || {
			warning " '${U}' is not found or not supported."
			return 1;
		}
		return 0;
	}

	local x;
	for x in ${P}; do
		C="${T:+${T}-}${x}";
		info "Checking ${C}"
		RunTest "${C}" && {
			export ${W}="${C}";
			return 0;
		}
	done

	warning " No suitable ${W} ${T:+for '${T}' }is not found."
	return 1;
}

RunTest(){
	${1} --version >${N} 2>&1 || return 1;
	return 0;
}

ReadConfigH(){ # Path
	local x;

	[ ! -e "${1}" ] && {
		warning "'${1}' is not found."
		NO_CONFIG_H=1;
		return 0;
	}

	local IFS='	';
	while read -r x; do
		set -- ${x};

		case "${1}" in
			'#ConfigInt' )
				AddArgList 'i' "${2}" "${3}" "${4}"
			;;
			'#ConfigStr' | '#ConfigRaw' )
				AddArgList 's' "${2}" "${3}" "${4}"
			;;
			'#ConfigBool' )
				AddArgList 'b' "${2}" "${3}" "${4}"
			;;
		esac

	done < "${1}"

	return 0;
}

AddArgList(){
	local A=`RemoveDQ "${4}"`;
	DCFG_ARGLIST="${DCFG_ARGLIST:+${DCFG_ARGLIST}${LF}}${A}=${1}:${2}";
	export DCFG_KV_${2}=`RemoveDQ "${3}"`;
	return 0;
}

RemoveDQ(){
	local IFS='"';
	set -- ${*};

	[ ! "${2}" = '' ] && {
		echo "${2}"
		return 0;
	}
	echo "${1}";
	return 0;
}

ProcessArgs(){
	local x K V;
	local PREV='';
	for x in "${@}"; do
		case "${x}" in
			--*=* )
				PREV='';
				x="${x#--}";
				K="${x%%=*}";
				V="${x#*=}";
				SetConfig "${K}" "${V}" || return ${?};
			;;
			--* )
				x="${x#--}";
				K="${x%%=*}";
				PREV="${K}"
				SetConfig "${K}" '1' || return ${?};
			;;

			-* )
				x="${x#-}";
				case "${x}" in
					v) ShowVersion;;
					h) ShowUsage;;
					*)
						error "Unknown option: -${x}"
						return 1;;
				esac
			;;

			*=* )
				PREV='';
				K="${x%%=*}";
				V="${x#*=}";
				SetValue "${K}" "${V}" || return ${?};
			;;
			* )
				K="${x}";
				[ "${PREV}" = '' ] && {
					SetValue "${K}" '1' || return ${?};
				} || {
					SetConfig "${PREV}" "${K}" || return ${?};
				}
				PREV='';
			;;

		esac
	done
	return 0;
}

SetConfig(){ #K, V
	local K="${1}";
	local V="${2}";

	# Generalize
	case "${K}" in
		disable-*)
			K="enable-${K#disable-}";
			V=0;
		;;
	esac

	# Bool
	case "${K}" in
		enable-*)
			SetBool "${K}" "${V}" || return ${?};
			return 0;
		;;
	esac

	SetStrInt "${K}" "${V}" || return ${?};

	return 0;
}

SetValue(){ #K, V
	export ${1}="${2}";
	DCFG_VARLIST="${DCFG_VARLIST:+${DCFG_VARLIST}${LF}}${1}=${2}";
	return 0;
}

SetBool(){ # K, V
	local K="${1#enable-}";
	local V="${2}";

	case "${V}" in
		0 | false | False | FALSE | no | No | NO | off | Off | OFF ) V=0;;
		*) V=1;;
	esac

	# System
	case "${K}" in
		shared)
			DCFG_SSMODE_SHARED=${V};
			return 0;
		;;
		static)
			DCFG_SSMODE_STATIC=${V};
			return 0;
		;;
	esac


	local IFS="${LF}";
	for x in ${DCFG_ARGLIST}; do
		case "${x}" in
			${K}=b:* )
				export DCFG_KV_${x#*:}="${V}";
				return 0;
			;;
		esac
	done

	return 1;
}

SetStrInt(){ # K, V
	local K="${1}";
	local V="${2}";

	# System level
	SetSystemLevelStr "${K}" "${V}" && return 0;

	# Str, Int
	local P=0;
	local IFS="${LF}";
	for x in ${DCFG_ARGLIST}; do
		case "${x}" in
			${1}=s:*) P=1; SetStr "${K}" "${V}" "${x#*:}" && return 0;;
			${1}=i:*) P=1; SetInt "${K}" "${V}" "${x#*:}" && return 0;;
		esac
	done

	[ "${P}" = '0' ] && {
		error "Unknown option: --${K}"
	}

	return 1;
}

SetStr(){ # K, V, To
	local K="${1}";
	local V="${2}";
	local T="${3}";

	export DCFG_KV_${T}="${V}";
	return 0;
}

SetInt(){ # K, V, To
	local K="${1}";
	local V="${2}";
	local T="${3}";
	local OFS="${IFS}";

	local IFS='0123456789';
	set -- ${V}
	IFS="${OFS}";

	[ ! "${1}" = '' ] && {
		error "${K}: Can not convert '${V}' to int"
		return 1;
	}

	export DCFG_KV_${T}="${V}";
	return 0;
}


SetSystemLevelStr(){ # K, V
	local K="${1}";
	local V="${2}";

	case "${K}" in
		help) ShowUsage;;
		version) ShowVersion;;

		build) export DCFG_SYS_BUILD="${V}";;
		host) export DCFG_SYS_HOST="${V}";;
		target) export DCFG_SYS_TARGET="${V}";;

		prefix) export DCFG_SYS_PREFIX="${V}";;
		exec-prefix) export DCFG_SYS_EXEC_PREFIX="${V}";;

		srcdir) export DCFG_SYS_SRCDIR="${V}";;

		program-prefix) export DCFG_SYS_PROGRAM_PREFIX="${V}";;
		program-suffix) export DCFG_SYS_PROGRAM_SUFFIX="${V}";;

		bindir) export DCFG_SYS_BINDIR="${V}";;
		sbindir) export DCFG_SYS_SBINDIR="${V}";;
		libexecdir) export DCFG_SYS_LIBEXECDIR="${V}";;
		sysconfdir) export DCFG_SYS_SYSCONFDIR="${V}";;
		sharedstatedir) export DCFG_SYS_SHAREDSTATEDIR="${V}";;
		localstatedir) export DCFG_SYS_LOCALSTATEDIR="${V}";;
		runstatedir) export DCFG_SYS_RUNSTATEDIR="${V}";;
		libdir) export DCFG_SYS_LIBDIR="${V}";;
		includedir) export DCFG_SYS_INCLUDEDIR="${V}";;
		oldincludedir) export DCFG_SYS_OLDINCLUDEDIR="${V}";;
		datarootdir) export DCFG_SYS_DATAROOTDIR="${V}";;
		datadir) export DCFG_SYS_DATADIR="${V}";;
		infodir) export DCFG_SYS_INFODIR="${V}";;
		localedir) export DCFG_SYS_LOCALEDIR="${V}";;
		mandir) export DCFG_SYS_MANDIR="${V}";;
		docdir) export DCFG_SYS_DOCDIR="${V}";;
		htmldir) export DCFG_SYS_HTMLDIR="${V}";;
		dvidir) export DCFG_SYS_DVIDIR="${V}";;
		pdfdir) export DCFG_SYS_PDFDIR="${V}";;
		psdir) export DCFG_SYS_PSDIR="${V}";;

		*) return 1;
	esac
	return 0;
}

SetSystemDefaultValue(){
	export DCFG_SYS_BUILD="${DCFG_SYS_BUILD}";
	export DCFG_SYS_HOST="${DCFG_SYS_HOST:-${DCFG_SYS_BUILD}}";
	export DCFG_SYS_TARGET="${DCFG_SYS_TARGET:-${DCFG_SYS_HOST}}";

	export DCFG_SYS_PREFIX="${DCFG_SYS_PREFIX:-/usr/local}";
	export DCFG_SYS_EXEC_PREFIX="${DCFG_SYS_EXEC_PREFIX:-\${PREFIX\}}";

	export DCFG_SYS_SRCDIR="${DCFG_SYS_SRCDIR:-${sRoot}}";

	export DCFG_SYS_PROGRAM_PREFIX="${DCFG_SYS_PROGRAM_PREFIX}";
	export DCFG_SYS_PROGRAM_SUFFIX="${DCFG_SYS_PROGRAM_SUFFIX}";

	export DCFG_SYS_BINDIR="${DCFG_SYS_BINDIR:-\${EXEC_PREFIX\}/bin}";
	export DCFG_SYS_SBINDIR="${DCFG_SYS_SBINDIR:-\${EXEC_PREFIX\}/sbin}";
	export DCFG_SYS_LIBDIR="${DCFG_SYS_LIBDIR:-\${EXEC_PREFIX\}/lib}";
	export DCFG_SYS_LIBEXECDIR="${DCFG_SYS_LIBEXECDIR:-\${EXEC_PREFIX\}/libexec}";

	export DCFG_SYS_SYSCONFDIR="${DCFG_SYS_SYSCONFDIR:-\${PREFIX\}/etc}";
	export DCFG_SYS_SHAREDSTATEDIR="${DCFG_SYS_SHAREDSTATEDIR:-\${PREFIX\}/shared}";
	export DCFG_SYS_LOCALSTATEDIR="${DCFG_SYS_LOCALSTATEDIR:-\${PREFIX\}/var}";
	export DCFG_SYS_RUNSTATEDIR="${DCFG_SYS_RUNSTATEDIR:-\${LOCALSTATEDIR\}/run}";
	export DCFG_SYS_INCLUDEDIR="${DCFG_SYS_INCLUDEDIR:-\${PREFIX\}/include}";
	export DCFG_SYS_OLDINCLUDEDIR="${DCFG_SYS_OLDINCLUDEDIR:-/usr/include}";
	export DCFG_SYS_DATAROOTDIR="${DCFG_SYS_DATAROOTDIR:-\${PREFIX\}/share}";
	export DCFG_SYS_DATADIR="${DCFG_SYS_DATADIR:-\${DATAROOTDIR\}}";
	export DCFG_SYS_INFODIR="${DCFG_SYS_INFODIR:-\${DATAROOTDIR\}/info}";
	export DCFG_SYS_LOCALEDIR="${DCFG_SYS_LOCALEDIR:-\${DATAROOTDIR\}/locale}";
	export DCFG_SYS_MANDIR="${DCFG_SYS_MANDIR:-\${DATAROOTDIR\}/man}";
	export DCFG_SYS_DOCDIR="${DCFG_SYS_DOCDIR:-\${DATAROOTDIR\}/doc/${NAME}}";
	export DCFG_SYS_HTMLDIR="${DCFG_SYS_HTMLDIR:-\${DOCDIR\}}";
	export DCFG_SYS_DVIDIR="${DCFG_SYS_DVIDIR:-\${DOCDIR\}}";
	export DCFG_SYS_PDFDIR="${DCFG_SYS_PDFDIR:-\${DOCDIR\}}";
	export DCFG_SYS_PSDIR="${DCFG_SYS_PSDIR:-\${DOCDIR\}}";

	return 0;
}

Entry(){
	local R=0;
	local N='/dev/null';

	TEMP_FILE="DESLConfigure.tmp";
	[ ! -e "${N}" ] && {
		N="${TEMP_FILE}";
	}

	TestEcho
	Main "${@}" || R=${?};


	[ ! "${R}" = '0' ] && {
		error "configure failed with error code: ${R}"
	}

	[ -e "${N}" ] && {
		rm -f "${TEMP_FILE}";
	}

	return ${R};
}

ShowUsageOptional(){
	local x;
	UsageFromConfigH "${sRoot}/config.h.in"
}


UsageFromConfigH(){ # Path
	local x K M;
	local W=0;
	local F="${1}";

	[ ! -e "${F}" ] && {
		error "Failed to open '${F}'"
		return 1;
	}

	local IFS='	';
	while read -r x; do
		set -- ${x};
		case "${1}" in
			'#ConfigInt' )
				K=`RemoveDQ "${4}"`;
				M=`RemoveDQ "${5}"`;
				W=1;
				OutputOptionalUsage "--${K}=INT" "${M}"
			;;
			'#ConfigStr' | '#ConfigRaw' )
				K=`RemoveDQ "${4}"`;
				M=`RemoveDQ "${5}"`;
				W=1;
				OutputOptionalUsage "--${K}=STR" "${M}"
			;;
		esac
	done < "${F}"

	[ "${W}" = '1' ] && echo

	while read -r x; do
		set -- ${x};
		case "${1}" in
			'#ConfigBool' )
				K=`RemoveDQ "${4}"`;
				M=`RemoveDQ "${5}"`;
				OutputOptionalUsage "--enable-${K}" "${M}"
			;;
		esac
	done < "${F}"

	return 0;
}

OutputOptionalUsage(){
	local K="${1}";
	local M="${2}";
	local ML="${#M}";
	local X;
	case "${#K}" in
		[1-7])
			X=$((80-(8*4)-1-ML));
			[ ! "${X%[0-9]}" = '-' ] && {
				echo "	${K}			${M}"
				return 0;
			}
		;;
		8|9|10|11|12|13|14|15)
			X=$((80-(8*3)-1-ML));
			[ ! "${X%[0-9]}" = '-' ] && {
				echo "	${K}		${M}"
				return 0;
			}
		;;
		16|17|18|19|20|21|22|23)
			X=$((80-(8*2)-1-ML));
			[ ! "${X%[0-9]}" = '-' ] && {
				echo "	${K}	${M}"
				return 0;
			}
		;;
	esac

	echo "	${K}"
	echo "		${M}"
	return 0;
}

ShowUsage(){
cat << EOF
Usage:
	${SELFR} [OPTION]... [VAR=VALUE]...

* Cross compile:
	--build			Compiler prefix for building system
	--host			Compiler prefix for application
	--target		architecture for application outputs
				(For compilers. Not necessary for most apps.)

* Program names:
	--program-prefix=PRX	prepend SRX to program names
	--program-suffix=SFX	append SFX to program names

* Directory settings:
	--prefix=PREFIX		Install root for arch.-dependent [/usr/local]
	--exec-prefix=EPREFIX	Install root for arch.-independent [PREFIX]

	--bindir=DIR		App: user executables [EPREFIX/bin]
	--sbindir=DIR		App: admin executables [EPREFIX/sbin]
	--libexecdir=DIR	App: app internal executables [EPREFIX/libexec]

	--sysconfdir=DIR	Data: per machine (read only) [PREFIX/etc]
	--sharedstatedir=DIR	Data: arch.-independent [PREFIX/com]
	--localstatedir=DIR	Data: per machine [PREFIX/var]
	--runstatedir=DIR	Data: per process [LOCALSTATEDIR/run]

	--libdir=DIR		Lib: libraries [EPREFIX/lib]
	--includedir=DIR	Header: header files [PREFIX/include]
	--oldincludedir=DIR	Header: header files for legacy [/usr/include]

	--datarootdir=DIR	Data: arch.-independent root [PREFIX/share]
	--datadir=DIR		Data: arch.-independent [DATAROOTDIR]
	--localedir=DIR		Data: locale-dependent [DATAROOTDIR/locale]

	--docdir=DIR		Doc: document root [DATAROOTDIR/doc/6relayd]
	--infodir=DIR		Doc: info [DATAROOTDIR/info]
	--mandir=DIR		Doc: man format [DATAROOTDIR/man]
	--htmldir=DIR		Doc: html format [DOCDIR]
	--dvidir=DIR		Doc: dvi format [DOCDIR]
	--pdfdir=DIR		Doc: pdf format [DOCDIR]
	--psdir=DIR		Doc: ps format [DOCDIR]

* Optinal features:
EOF

ShowUsageOptional;

cat << EOF

* Set environment variables (e.g.: CC, CFLAGS, LDFLAGS...)
	CC		C compiler command for application (e.g.: cc)
	CFLAGS		C compiler flags (e.g.: -I<include dir>)
	CPPFLAGS	C/C++ preprocessor flags
	BUILD_FOR_CC	C compiler for build tools
	CXX		C++ compiler command
	CXXFLAGS	C++ compiler flags
	LDFLAGS		linker flags (e.g.: -L<lib dir>)
  	LIBS		libraries to pass to the linker (e.g.: -l<lib name>)

EOF

	exit 1;
}

TestEcho(){
	echo_e='echo -e';
	local T=`${echo_e}`
	[ ! "${T}" = '' ] && {
		echo_e='echo';
	}
	return 0;
}
error(){
	${echo_e} "\e[31;1mE:\e[m\e[1m ${*}\e[m" >&2
}
warning(){
	${echo_e} "\e[33;1mW:\e[m\e[1m ${*}\e[m" >&2
}
infoex(){
	${echo_e} "\e[m\e[1mI:\e[m\e[1m ${*}\e[m"
}
info(){
	${echo_e} "I: ${*}"
}

Entry "${@}";
